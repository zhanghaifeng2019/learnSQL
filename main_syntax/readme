心得: select 后面跟的都是column名。


1.SHOW DATABASES;


2.CREATE DATABASE database_name;


3.USE database_name;


//能为null的，全都设为null 这样可以减轻数据库负担。
    is_deleted TINYINT(1) NOT NULL DEFAULT 0,
    created DATETIME,
    modified DATETIME
  是每个表都必须要有的，
  删除记录的时候就把is_deleted设为1.没有删除的就是0.所有的记录都不要删除
  根据需要还可以添加status字段。status TINYINT(1) NOT NULL DEFAULT 0,供员工来审查这写记录。
  
  -1 = 非承認
  0 = 保留
  1 = 承認
  3 = 終了
  

4.
CREATE TABLE agencyinfo(
    id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    agency_name VARCHAR(255) COLLATE utf8_general_ci DEFAULT NULL,
    person_in_charge VARCHAR(255) COLLATE utf8_general_ci　DEFAULT NULL,
    tel VARCHAR(255) COLLATE utf8_general_ci DEFAULT NULL,
    email VARCHAR(255) COLLATE utf8_general_ci DEFAULT NULL,
    zip VARCHAR(8) COLLATE utf8_general_ci DEFAULT NULL,
    address VARCHAR(255) COLLATE utf8_general_ci DEFAULT NULL,
    is_deleted TINYINT(1) NOT NULL DEFAULT 0,
    created DATETIME,
    modified DATETIME
)ENGINE=InnoDB DEFAULT CHARSET=utf8;



5.
//不包含id,插入所有column。可插入多条数据，也可插入一条数据

INSERT INTO table_name 
VALUE ('ハナコ',27), 
("1",'アン',34), 
("2",'オシン',52), 
("3",'ジュン',25), 
("4",'エリー',22);


//只插入type 跟 price 两个column

INSERT INTO table_name (type, price)
VALUE ('ハナコ',27), 
('アン',34), 
('オシン',52), 
('ジュン',25), 
('エリー',22);


6,
SELECT * FROM table_name;

SELECT column1,column2 FROM table_name;

SELECT column1,column2 FROM table_name  WHERE id=1;                  (id 为 int 型)

SELECT column1,column2 FROM table_name  WHERE name="zhanghaifeng";   (name 为 varchar 型)


7，
UPDATE table_name  SET column_name="~~~" WHERE id=1;

UPDATE table_name  SET column_name1="~~~",column2="~~~" WHERE id=1;

8,

DELETE FROM table_name
DELETE FROM table_name WHERE id=1;
DELETE FROM table_name WHERE name="zhanghaifeng";

9,
desc table_name;


10,
DROP TABLE table_name;


11,
DROP DATABASES database_name;


12, 通过导入文件来建立表单
source path/file_name.sql;



----------------------------------------------------------------------------------
string function  不怎么用

13,  CONCAT()

SELECT CONCAT(first_name,last_name) AS "full_name" FROM table_name;

SELECT CONCAT(first_name,"-",last_name) AS "full_name" FROM table_name;

SELECT CONCAT_WS("-",title,name,age) AS "bookinfo" FROM table_name;                   => title-name-age


14,   SUBSTRING()

SELECT SUBSTRING("hello world",1,4);   1开始，4结束   =>hell


SELECT SUBSTRING("hello world",7);     7开始         =>world



15 ,
SELECT CONCAT
       (
         SUBSTRING(title,1,10),
         "......."
       ) AS "short_title"
       FROM books ;                     截取一部份title并在其后加上省略号 => he is a......
      

16,REPLACE

SELECT REPLACE("hello,world","hello","good");  => "good,world"

SELECT REPLACE(title,"e","t")FROM books;       将title里的e全部换成t


17，REVERSE

SELECT REVERSE(title) FROM books;


18,CHAR_LENGTH

SELECT CHAR_LENGTH("hello");

SELECT title,CHAR_LENGTH(title) AS length FROM books;




19,UPPER <=> LOWER

SELECT UPPER("hello,world");   =>HELLO,WORLD

-----------------------------------------------------------------------------------------------------------------

20,DISTINCT

SELECT DISTINCT title FROM books;

SELECT DISTINCT fname,lname FROM books;

fname     lname

zhang    haifeng         zhang haifeng
zhang    haifeng      => wang  ming
wang     ming            li    wei 
li       wei


21,ORDER BY

SELECT fname FROM books ORDER BY fname;   =>按字母顺序,数字也可以排

SELECT fname FROM books ORDER BY fname DESC; =>字母逆序

SELECT fnam,age FROM books ORDER BY age ;

SELECT fnam,age FROM books ORDER BY 2 ;   2指的age，与上面的命令相同。

SELECT fname,lname FROM books ORDER BY  fname,lname;   首先fname按顺序排列，如果fname中有两个值相同，就按lname的顺序来排。


22,LIMIT -> pagination

SELECT title FROM books LIMIT 5;  取五条记录

SELECT title FROM books LIMIT 0,10;  从第一行开始选，选10个


23，LIKE  ->  search
SELECT title,author_fname FROM books WHERE author_name LIKE "da";    搜索author_name里面包含da的字符，不管大小写
SELECT title,author_fname FROM books WHERE author_name LIKE "____";  这里的四个下划线，表示四个字符。搜索author_name里面只有四个字符的记录。

字符逃跑 \%, \_
WHERE title LIKE "%\%%"
WHERE title LIKE "%\_%"




--------------------------------------------------------------------------------

aggregate function 集計関数

24, COUNT();  计算有多少条记录

SELECT COUNT(*) FROM books;
SELECT COUNT(DISTINCT fname,lname )FROM books;   排除同名的，求记录的数量。
SELECT COUNT(*) FROM books WHERE title LIKE "%the%" ;    计算title 包含the的数量



25，GROUP BY();

SELECT author_name,age FROM books GROUP BY author_name;

author_name   age       author_name   age         
zhang         10           zhang      10     =>  zhang      10       zhang      20  这是一组，第二个以后被隐藏了
zhang         20           wang       15     =>  wang       1        wang       25  这是另一组，第二个以后被隐藏了
wang          15    =>     huang      30
wang          25
huang         30


SELECT author_name,COUNT(*) FROM books GROUP BY author_name;　　　先按姓名分组，再 计算没一组的数量

author_name   COUNT(*)
zhang     　　 2
wang       　　2
huang      　　1


SELECT fname,lname,COUNT(*) FROM books GROUP BY fname, lname;   

按fname 和 lname来分，必须是两个人的fname和lname相同还能分到同一组。否则分到不同组。


SELECT CONCAT("released_year"," ",COUNT(*),"book(s) released") FROM books GROUP BY released_year;

=> 2003 3 book(s) released;     如果后面跟了GROUP BY 从句，那么COUNT(*) 计算的是每一组的数量



26，MAX(),MIN()
SELECT MIN(age)　FROM books;

查找，页数最多的书名。
SELECT MAX(pages)，title FROM boosk; 这样写是错的。MAX(pages)只有一行，然后再选title的时候，数据库就会只选第一个title。

方法一:用子句，因为要运行两个句子，所以查询速度慢。

SELECT pages,title FROM books WHERE pages = (SELECT MAX(pages) FROM books);

方法二: 用order by

SELECT pages,title FROM books ORDER BY pages DESC LIMIT 1;


27，find the year each author published their first book;  each  找到每一个作者第一次出版书的时间。
    数据库语言要从后忘前看
    
    SELECT author_fname,author_lname,MIN(released_year) FROM books  GROUP BY author_fname,author_lname;
    首先按author_fname,author_lname分组，然后再去取每个组里面的MIN(released_year)，author_fname,author_lname;
    
    SELECT CONCAT(author_fname,"",author_lname) AS author,MAX(pages) AS "longest book" 
    FROM books 
    GROUP BY author_fname,author_lname;

28, SUM()

SELECT SUM(age) FROM books;   把所有的页数都加起来。只有一个值。
SELECT author_fname,author_lname,SUM(pages) FROM books GROUP BY author_fname,author_lname;


29,AVG()
SELECT AVG(age) FROM books; 求平均，把所有记录的age相加，除以记录数，只有一个值.

后面也可跟group by ,跟 max，min，sum,count 一样

SELECT author_fname,author_lname,AVG( pages) FROM books GROUP BY author_fname,author_lname;



30,ROUND() 省略小数点后面的位数。具体内容查看手册


-------------------------------------------------------------------------------------------------
data types

详见database.doc 文件


-------------------------------------------------------------------------------------------------
logical charact
！=
NOT LIKE
>
<
=
>=
<= 
AND(也可以写成&&)
OR(也可以写成||)

BETWEEN
NOT BETWEEN 
SELECT title FROM books WHERE released_year BETWEEN 2001 AND 2010; (released_year>=2001 AND released_year<=2010)
SELECT title FROM books WHERE released_year NOT BETWEEN 2001 AND 2010;(released_year<2001 AND released_year>2010)

"2017-05-02"  是一个string。
CAST("2017-05-02" AS DATETIME) 就变成了一个 DATETIME 类型了 ;SELECT CAST("2017-05-02" AS DATETIME);    =>2017-05-02 00:00:00
CAST("2017-05-02" as DATE)
SELECT name,birthdt FROM people WHERE birthdt BETWEEN "2010-01-01" AND "2000-01-01";   依然会有结果但是不建议这样用。
SELECT name,birthdt FROM people WHERE birthdt BETWEEN CAST("2010-01-01" AS DATETIME) AND CAST("2000-01-01" AS DATETIME);




IN
SELECT title,author_lname FROM books WHERE author_lname IN( "zhang","wang","li");                                 这个更短，更有用。
=
SELECT title,author_lname FROM books WHERE author_lname="zhang" OR author_lname="wang" OR author_lname="li";      这个太长不好维护


NOT IN 
SELECT title,released_year FROM books WHERE  released_year NOT IN(2000,2001,2002);  
=
SELECT title,released_year FROM books WHERE released_year != 2000 AND released_year != 2001 ANDreleased_year != 2002;

SELECT title,released_year FROM books WHERE released_year>=2000 released_year NOT IN(2000,2001,2002,2003,2004 );  


CASE

books表里面没有genre这一栏，我想出版年大于2000 显示genre为mordern literature，否则显示为20th century literature

SELECT title,released_year,
       CASE
         WHEN released_year >= 2000 THEN "mordern literature"
         ELSE "20th century literature"
       END AS GENRE
FROM books;


用星号表示存货充足与否
 
SELECT title,stock_quantity 
      CASE 
          WHEN stock_quantity BETWEEN 0 AND 50 THEN "*"
          WHEN stock_quantity BETWEEN 51 AND 100 THEN "**"
          ELSE "***" 
      END AS stock
FORM books;
      



select.....from..... where...AND...x like... order by.....limit   最先看join 再看 group by 再看where
select.....from..... where...AND...x like...group by.....limit



--------------------------------------------------------------------------------------
join
one to many

一个表里面有很多条同一个人的记录。这是不对的。建立表的时候不应该允许一个表里面有很多条同一个人的记录.
还没有买东西就用户的信息存进去，xiao跟mei。这样也是不对的。
最好是把数据分开。不利于查询，还占用空间。

name	   email             order_date       amount
zhang	zhang@gmail.com   	"2019/02/10"        100
zhang	zhang@gmail.com	    "2019/04/10"	    150
wang	wang@gmail.com	    "2018/11/12"	    130
hua	    hua@gmail.com	    "2017/2/04"	        23
hua	    hua@gmail.com	    "2018/7/92"         50
xiao	xiao@gmail.com	    null	            null
mei     mei@gmail.com       null                null

最好是分开，用customer_id 来连接

	          customer        (primar key is customer_id)
              
customer_id	    name	    email
   1	        zhang	zhang@gmail.com
   2	        wang  	wang@gmail.com
   3	        hua	    hua@gmail.com
   4	        xiao	xiao@gmail.com
   5	        mei	    mei@gmail.com
   
   
            	orders		  (primary key is  order_id  and foreign key is customer_id)
                
order_id	  order_date	amount	customer_id
    1	     "2019/02/10"	 100	    1
    2	     "2019/04/10"	 150	    1
    3	     "2018/11/12"	 130	    2
    4	     "2017/2/04"     23      	3
    5	     "2018/7/92"	 50	        3

   
------------------------------------------------------------------------------------
CREATE TABLE customers (
     id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20),
    email VARCHAR(40)
);

INSERT INTO customers(name,email)
VALUES("zhang","zhang@gmail.com"),
      ("wang","wang@gmail.com"),
      ("hua","hua@gmail.com"),
      ("xiao","xiao@gmail.com"),
      ("mei","mei@gmail.com");


CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id)
);

INSERT INTO orders(order_date,amount,customer_id) 
VALUES("2019/02/10",100,1),
      ("2019/04/10",150,1),
      ("2018/11/12",130,2),
      ("2017/2/04",23,3),
      ("2018/7/12",50,3);
  
因为foreign key的存在，就不能插入，不存在的customer_id,例如
INSERT INTO orders(order_date,amount,customer_id) VALUES("2020/03/05",10,1)； 就会报错。
因为有foreign key的存在，所以删除的时候只能先删除orders 之后再删除customers 表。


SELECT 
    name,
    IFNULL(SUM(amount),0) AS total_spent
FROM customers
LEFT JOIN orders
     ON customers.id = orders.customer_id
GROUP BY customers.id
ORDER BY total_spent;

//IFNULL(SUM(amount),0) 表示的是，如果SUM(amount)为null 显示的值为0，否者显示的值为SUM(amount)的结果.
//IFNULL(name,"missing_name"),表示的是如果name为null 显示的值为missing_name，否者显示的值为name的结果。



----ON DELETE CASCADE   如果删除了customers表中的一条记录，也会删除orders表中的相关记录
 
CREATE TABLE customers (
     id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20),
    email VARCHAR(40)
);


CREATE TABLE orders(
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(8,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(id) ON DELETE CASCADE
);


----many to many

books <-> authors
students <-> classes

imagine we are building a tv show reviewing application: 

series date <----reviews data---->  reviewers data

--------------------------------------------------------------------------
CREATE TABLE reviewers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	first_name VARCHAR(100),
	laset_name VARCHAR(100)
);

INSERT INTO reviewers(first_name,last_name) VALUES
("zhang","haifeng"),
("xiao","ming"),
("xiao","hong"),
("da","huang"),
("wang","wei"),
("li","xiang"),
("tian","xing"),
("yang","miao");



CREATE TABLE series(
	id INT PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(100),
	released_year YEAR(4),
	genre VARCHAR(100)
);

INSERT INTO series(title,released_year,genre) VALUES 
("lion king",1998,"animation"),
("love",2000,"drama"),
("bad body",2018,"sf"),
("died",2010,"comedy"),
("bob's burgers",1978,"drama"),
("go to the unknown",2001,"sf"),
("dreamer",2007,"action"),
("guys",2010,"comedy"),
("ships",2003,"drama");


CREATE TABLE reviews(
	id INT PRIMARY KEY AUTO_INCREMENT,
	rating DECIMAL(2,1),
	series_id INT,
	reviewer_id INT,
	FOREIGN KEY(series_id) REFERENCES series(id),
	FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

INSERT INTO reviews(series_id,reviewer_id,rating) VALUES
(1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,9.9),
(2,1,8.1),(2,4,6.0),(2,6,8.4),(2,5,9.1),
(3,1,7.4),(3,6,7.5),(3,4,8.0),(3,5,8.3),(3,2,7.5),
(4,1,7.5),(4,2,9.0),(4,7,3.2),
(5,2,6.7),(5,5,8.5),(5,6,6.8),
(6,3,5.4),(6,5,9.0),(6,4,9.0),(6,6,10),(6,7,6.7),
(7,4,5.5),
(8,1,8.9),(8,3,9.0),(8,4,7.5),(8,5,9.8);
-----------------------------------------------------------------------------------------------------------------------
另一个例子
join

1,建立user表格

    CREATE TABLE users(
        user_id INT AUTO_INCREMENT PRIMARY KEY,
        user_name VARCHAR(256),
        category_id INT
    );

2，userb表格里插入记录
    INSERT INTO users
    (user_name,category_id)
    VALUES
    ("tanaka",1),
    ("saito",2),
    ("zhang",3),
    ("wang",4);

    ----------------------------------------------------------------------------------

    user_id     user_name        category_id
    1             tanaka              1
    2              saito              2
    3              zhang              3
    4               wang              4

    ------------------------------------------------------------------------------------

3，建category表格

    CREATE TABLE category(
        category_id INT PRIMARY KEY AUTO_INCREMENT,
        category_name VARCHAR(256)
    );

4，category表格里面插入记录

    INSERT INTO category
    (category_name)
    VALUES
    ("music"),
    ("football");

    -----------------------------------------------------------------------------------

     category_id         category_name
        1                    music
        2                   football

    ------------------------------------------------------------------------------------

5,测试join(inner join)

    SELECT * FROM users u

    JOIN category c

    ON u.category_id =c.category_id;

    -----------------------------------------------------------------------------------

    user_id     user_name        category_id     category_id         category_name
    1            tanaka               1             1                    music
    2             saito               2             2                   football

    ------------------------------------------------------------------------------------


取category_id共有的部分


6,测试left join（想显示users表里所有的内容，顺便显示与之相关的category的内容）

    SELECT * FROM users u

    LEFT JOIN category c

    ON u.category_id =c.category_id;

----------------------------------------------------------------------------------

user_id     user_name        category_id     category_id         category_name
1             tanaka              1               1                   music
2              saito              2               2                  football
3              zhang              3              NULL                  NULL
4               wang              4              NULL                  NULL

------------------------------------------------------------------------------------

7,测试right join （想显示category表里所有的内容，顺便显示与之相关的users的内容）

    SELECT * FROM users u

    RIGHT JOIN category c

    ON u.category_id =c.category_id;

    -----------------------------------------------------------------------------------

    user_id     user_name        category_id     category_id         category_name
    1            tanaka               1             1                    music
    2             saito               2             2                   football

    ------------------------------------------------------------------------------------

8,给category表格添加记录后，

    INSERT INTO category
    (category_name)
    VALUES
    ("food"),
    ("running"),
    ("movie");

    -----------------------------------------------------------------------------------
       category_id         category_name
             1                 music
             2                football
             3                  food
             4                 running
             5                  movie
    ------------------------------------------------------------------------------------


9,测试right join （想显示category表里所有的内容，顺便显示与之相关的users的内容）

    SELECT * FROM users u

    RIGHT JOIN category c

    ON u.category_id =c.category_id;

    -----------------------------------------------------------------------------------

    user_id     user_name        category_id     category_id         category_name

    1            tanaka                1               1                 music
    2             saito                2               2                football
    3             zhang                3               3                  food
    4              wang                4               4                 running
    NULL           NULL               NULL             5                  movie
    ------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------
三个表的连接


// 建立表
CREATE DATABASE join_test_db;
USE join_test_db;
 
CREATE TABLE monthly_sales(id VARCHAR(5),sales INT,client_id INT)ENGINE=InnoDB  DEFAULT CHARSET=utf8;
CREATE TABLE employee_name_entry_year(id VARCHAR(5),name VARCHAR(6),entry_year YEAR)ENGINE=InnoDB  DEFAULT CHARSET=utf8;
CREATE TABLE employee_address(id VARCHAR(5),prefecture VARCHAR(3))ENGINE=InnoDB  DEFAULT CHARSET=utf8;
 
INSERT INTO monthly_sales (id,sales,client_id) VALUES
('A103','125','1'),
('A102','50','2'),
('A101','64','4'),
('A104','37','6'),
('A102','285','3'),
('A106','300','6'),
('A103','24','1'),
('A101','350','2'),
('B107','14','1');
 
INSERT INTO employee_name_entry_year (id,name,entry_year) VALUES
('A101','川越','2008'),
('A102','大宮','2008'),
('A103','浦和','2008'),
('A104','戸田','2010'),
('A105','赤羽','2012'),
('A106','大井','2014');
 
INSERT INTO employee_address (id,prefecture) VALUES
('A101','千葉'),
('A102','群馬'),
('A103','栃木'),
('A104','茨城'),
('A105','東京'),
('A106','神奈川');


// using 必须是连接两张表的id名是一样的。这三张表的id名都是一样的。否则用on

SELECT x.id, x.sales AS 売上, y.name AS 名前, y.entry_year AS 入社年, z.prefecture AS 出身県
    FROM monthly_sales AS x
JOIN employee_name_entry_year AS y
    USING(id)
JOIN employee_address AS z
    USING(id);



-----------------------------------------------------------------------

CREATE TABLE orders(id VARCHAR(5),sales INT,client_id INT)ENGINE=InnoDB  DEFAULT CHARSET=utf8;










